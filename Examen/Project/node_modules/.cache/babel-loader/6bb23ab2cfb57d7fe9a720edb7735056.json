{"ast":null,"code":"import axios from 'axios';\nimport { getLogger } from '../core';\nconst log = getLogger('itemApi');\nconst baseUrl = 'localhost:3000';\nconst productUrl = `http://${baseUrl}/product`;\nconst itemUrl = `http://${baseUrl}/item`;\n\nfunction withLogs(promise, fnName) {\n  log(`${fnName} - started`);\n  return promise.then(res => {\n    log(`${fnName} - succeeded`);\n    return Promise.resolve(res.data);\n  }).catch(err => {\n    log(`${fnName} - failed`);\n    return Promise.reject(err);\n  });\n}\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nexport const getProductsPage = page => {\n  return withLogs(axios.get(`${productUrl}?page=${page}`, config), `getProductsPage ${page}`);\n};\nexport const uploadItem = item => {\n  return withLogs(axios.post(`${itemUrl}`, item, config), 'updateItem');\n};\nexport const newWebSocket = onMessage => {\n  const ws = new WebSocket(`ws://${baseUrl}`);\n\n  ws.onopen = () => {\n    log('web socket onopen');\n  };\n\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n\n  return () => {\n    ws.close();\n  };\n};","map":{"version":3,"sources":["D:/Laboratoare/ANUL 3/Semestrul 1/ProgramarepentruDispozitiveMobile/Examen/Project/src/todo/itemApi.tsx"],"names":["axios","getLogger","log","baseUrl","productUrl","itemUrl","withLogs","promise","fnName","then","res","Promise","resolve","data","catch","err","reject","config","headers","getProductsPage","page","get","uploadItem","item","post","newWebSocket","onMessage","ws","WebSocket","onopen","onclose","onerror","error","onmessage","messageEvent","JSON","parse","close"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAIA,MAAMC,GAAG,GAAGD,SAAS,CAAC,SAAD,CAArB;AAEA,MAAME,OAAO,GAAG,gBAAhB;AACA,MAAMC,UAAU,GAAI,UAASD,OAAQ,UAArC;AACA,MAAME,OAAO,GAAI,UAASF,OAAQ,OAAlC;;AAMA,SAASG,QAAT,CAAqBC,OAArB,EAAyDC,MAAzD,EAAqF;AACnFN,EAAAA,GAAG,CAAE,GAAEM,MAAO,YAAX,CAAH;AACA,SAAOD,OAAO,CACXE,IADI,CACCC,GAAG,IAAI;AACXR,IAAAA,GAAG,CAAE,GAAEM,MAAO,cAAX,CAAH;AACA,WAAOG,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACG,IAApB,CAAP;AACD,GAJI,EAKJC,KALI,CAKEC,GAAG,IAAI;AACZb,IAAAA,GAAG,CAAE,GAAEM,MAAO,WAAX,CAAH;AACA,WAAOG,OAAO,CAACK,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD;;AAED,MAAME,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADI,CAAf;AAYA,OAAO,MAAMC,eAAuD,GAAIC,IAAD,IAAU;AAC/E,SAAOd,QAAQ,CAACN,KAAK,CAACqB,GAAN,CAAW,GAAEjB,UAAW,SAAQgB,IAAK,EAArC,EAAwCH,MAAxC,CAAD,EAAmD,mBAAkBG,IAAK,EAA1E,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,UAAqD,GAAGC,IAAI,IAAI;AAC3E,SAAOjB,QAAQ,CAACN,KAAK,CAACwB,IAAN,CAAY,GAAEnB,OAAQ,EAAtB,EAAyBkB,IAAzB,EAA+BN,MAA/B,CAAD,EAAyC,YAAzC,CAAf;AACD,CAFM;AAQP,OAAO,MAAMQ,YAAY,GAAIC,SAAD,IAA4C;AACtE,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAe,QAAOzB,OAAQ,EAA9B,CAAX;;AACAwB,EAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AAChB3B,IAAAA,GAAG,CAAC,mBAAD,CAAH;AACD,GAFD;;AAGAyB,EAAAA,EAAE,CAACG,OAAH,GAAa,MAAM;AACjB5B,IAAAA,GAAG,CAAC,oBAAD,CAAH;AACD,GAFD;;AAGAyB,EAAAA,EAAE,CAACI,OAAH,GAAaC,KAAK,IAAI;AACpB9B,IAAAA,GAAG,CAAC,oBAAD,EAAuB8B,KAAvB,CAAH;AACD,GAFD;;AAGAL,EAAAA,EAAE,CAACM,SAAH,GAAeC,YAAY,IAAI;AAC7BhC,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACAwB,IAAAA,SAAS,CAACS,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACrB,IAAxB,CAAD,CAAT;AACD,GAHD;;AAIA,SAAO,MAAM;AACXc,IAAAA,EAAE,CAACU,KAAH;AACD,GAFD;AAGD,CAlBM","sourcesContent":["import axios from 'axios';\nimport { getLogger } from '../core';\nimport { ItemProps } from './ItemProps';\nimport {ProductProps} from \"./ProductProps\";\n\nconst log = getLogger('itemApi');\n\nconst baseUrl = 'localhost:3000';\nconst productUrl = `http://${baseUrl}/product`;\nconst itemUrl = `http://${baseUrl}/item`;\n\ninterface ResponseProps<T> {\n  data: T;\n}\n\nfunction withLogs<T>(promise: Promise<ResponseProps<T>>, fnName: string): Promise<T> {\n  log(`${fnName} - started`);\n  return promise\n    .then(res => {\n      log(`${fnName} - succeeded`);\n      return Promise.resolve(res.data);\n    })\n    .catch(err => {\n      log(`${fnName} - failed`);\n      return Promise.reject(err);\n    });\n}\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nexport interface ProductPage {\n  total: number;\n  page: number;\n  products: ProductProps[];\n}\n\nexport const getProductsPage: (page: number) => Promise<ProductPage> = (page) => {\n  return withLogs(axios.get(`${productUrl}?page=${page}`, config), `getProductsPage ${page}`);\n}\n\nexport const uploadItem: (item: ItemProps) => Promise<ItemProps[]> = item => {\n  return withLogs(axios.post(`${itemUrl}`, item, config), 'updateItem');\n}\n\ninterface MessageData {\n  event: string;\n}\n\nexport const newWebSocket = (onMessage: (data: MessageData) => void) => {\n  const ws = new WebSocket(`ws://${baseUrl}`)\n  ws.onopen = () => {\n    log('web socket onopen');\n  };\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n  return () => {\n    ws.close();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}