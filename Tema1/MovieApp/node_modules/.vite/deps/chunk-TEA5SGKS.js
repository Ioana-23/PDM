import {
  registerPlugin
} from "./chunk-2FHDUKXO.js";

// node_modules/@capacitor/google-maps/dist/esm/implementation.js
var CapacitorGoogleMaps = registerPlugin("CapacitorGoogleMaps", {
  web: () => import("./web-2GMJKAQS.js").then((m) => new m.CapacitorGoogleMapsWeb())
});
CapacitorGoogleMaps.addListener("isMapInFocus", (data) => {
  var _a;
  const x = data.x;
  const y = data.y;
  const elem = document.elementFromPoint(x, y);
  const internalId = (_a = elem === null || elem === void 0 ? void 0 : elem.dataset) === null || _a === void 0 ? void 0 : _a.internalId;
  const mapInFocus = internalId === data.mapId;
  CapacitorGoogleMaps.dispatchMapEvent({ id: data.mapId, focus: mapInFocus });
});

// node_modules/@capacitor/google-maps/dist/esm/definitions.js
var LatLngBounds = class {
  constructor(bounds) {
    this.southwest = bounds.southwest;
    this.center = bounds.center;
    this.northeast = bounds.northeast;
  }
  async contains(point) {
    const result = await CapacitorGoogleMaps.mapBoundsContains({
      bounds: this,
      point
    });
    return result["contains"];
  }
  async extend(point) {
    const result = await CapacitorGoogleMaps.mapBoundsExtend({
      bounds: this,
      point
    });
    this.southwest = result["bounds"]["southwest"];
    this.center = result["bounds"]["center"];
    this.northeast = result["bounds"]["northeast"];
    return this;
  }
};
var MapType;
(function(MapType2) {
  MapType2["Normal"] = "Normal";
  MapType2["Hybrid"] = "Hybrid";
  MapType2["Satellite"] = "Satellite";
  MapType2["Terrain"] = "Terrain";
  MapType2["None"] = "None";
})(MapType || (MapType = {}));

export {
  CapacitorGoogleMaps,
  LatLngBounds,
  MapType
};
//# sourceMappingURL=chunk-TEA5SGKS.js.map
